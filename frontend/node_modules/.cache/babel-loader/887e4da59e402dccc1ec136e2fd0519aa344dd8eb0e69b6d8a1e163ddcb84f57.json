{"ast":null,"code":"import express from 'express';\nimport mongoose from 'mongoose';\nimport dotenv from 'dotenv';\nimport cors from 'cors';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport authRoutes from './routes/authRoutes.js';\nimport propertyRoutes from './routes/propertyRoutes.js';\nimport userRoutes from './routes/userRoutes.js';\ndotenv.config();\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\nconst app = express();\n\n// Middleware\napp.use(cors());\napp.use(express.json());\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\n\n// Connect to MongoDB\nmongoose.connect(process.env.MONGODB_URI).then(() => console.log('Connected to MongoDB')).catch(err => {\n  console.error('Could not connect to MongoDB', err);\n  process.exit(1);\n});\n\n// Routes\napp.use('/api/auth', authRoutes);\napp.use('/api/properties', propertyRoutes);\napp.use('/api/users', userRoutes);\n\n// Error handling middleware\napp.use((err, req, res, next) => {\n  console.error('Error:', err);\n  res.status(500).json({\n    message: 'Something went wrong',\n    error: process.env.NODE_ENV === 'production' ? {} : err\n  });\n});\nconst PORT = process.env.PORT || 5000;\napp.listen(PORT, () => {\n  console.log(`Server running on port ${PORT}`);\n  console.log(`API URL: http://localhost:${PORT}/api`);\n});\n\n// Log unhandled promise rejections\nprocess.on('unhandledRejection', (reason, promise) => {\n  console.log('Unhandled Rejection at:', promise, 'reason:', reason);\n});","map":{"version":3,"names":["express","mongoose","dotenv","cors","path","fileURLToPath","authRoutes","propertyRoutes","userRoutes","config","__filename","import","meta","url","__dirname","dirname","app","use","json","static","join","connect","process","env","MONGODB_URI","then","console","log","catch","err","error","exit","req","res","next","status","message","NODE_ENV","PORT","listen","on","reason","promise"],"sources":["E:/Room Rental/frontend/src/components/Services.js"],"sourcesContent":["import express from 'express';\r\nimport mongoose from 'mongoose';\r\nimport dotenv from 'dotenv';\r\nimport cors from 'cors';\r\nimport path from 'path';\r\nimport { fileURLToPath } from 'url';\r\nimport authRoutes from './routes/authRoutes.js';\r\nimport propertyRoutes from './routes/propertyRoutes.js';\r\nimport userRoutes from './routes/userRoutes.js';\r\n\r\ndotenv.config();\r\n\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nconst app = express();\r\n\r\n// Middleware\r\napp.use(cors());\r\napp.use(express.json());\r\napp.use('/uploads', express.static(path.join(__dirname, 'uploads')));\r\n\r\n// Connect to MongoDB\r\nmongoose.connect(process.env.MONGODB_URI)\r\n  .then(() => console.log('Connected to MongoDB'))\r\n  .catch(err => {\r\n    console.error('Could not connect to MongoDB', err);\r\n    process.exit(1);\r\n  });\r\n\r\n// Routes\r\napp.use('/api/auth', authRoutes);\r\napp.use('/api/properties', propertyRoutes);\r\napp.use('/api/users', userRoutes);\r\n\r\n// Error handling middleware\r\napp.use((err, req, res, next) => {\r\n  console.error('Error:', err);\r\n  res.status(500).json({\r\n    message: 'Something went wrong',\r\n    error: process.env.NODE_ENV === 'production' ? {} : err\r\n  });\r\n});\r\n\r\nconst PORT = process.env.PORT || 5000;\r\napp.listen(PORT, () => {\r\n  console.log(`Server running on port ${PORT}`);\r\n  console.log(`API URL: http://localhost:${PORT}/api`);\r\n});\r\n\r\n// Log unhandled promise rejections\r\nprocess.on('unhandledRejection', (reason, promise) => {\r\n  console.log('Unhandled Rejection at:', promise, 'reason:', reason);\r\n});\r\n\r\n"],"mappings":"AAAA,OAAOA,OAAO,MAAM,SAAS;AAC7B,OAAOC,QAAQ,MAAM,UAAU;AAC/B,OAAOC,MAAM,MAAM,QAAQ;AAC3B,OAAOC,IAAI,MAAM,MAAM;AACvB,OAAOC,IAAI,MAAM,MAAM;AACvB,SAASC,aAAa,QAAQ,KAAK;AACnC,OAAOC,UAAU,MAAM,wBAAwB;AAC/C,OAAOC,cAAc,MAAM,4BAA4B;AACvD,OAAOC,UAAU,MAAM,wBAAwB;AAE/CN,MAAM,CAACO,MAAM,CAAC,CAAC;AAEf,MAAMC,UAAU,GAAGL,aAAa,CAACM,MAAM,CAACC,IAAI,CAACC,GAAG,CAAC;AACjD,MAAMC,SAAS,GAAGV,IAAI,CAACW,OAAO,CAACL,UAAU,CAAC;AAE1C,MAAMM,GAAG,GAAGhB,OAAO,CAAC,CAAC;;AAErB;AACAgB,GAAG,CAACC,GAAG,CAACd,IAAI,CAAC,CAAC,CAAC;AACfa,GAAG,CAACC,GAAG,CAACjB,OAAO,CAACkB,IAAI,CAAC,CAAC,CAAC;AACvBF,GAAG,CAACC,GAAG,CAAC,UAAU,EAAEjB,OAAO,CAACmB,MAAM,CAACf,IAAI,CAACgB,IAAI,CAACN,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC;;AAEpE;AACAb,QAAQ,CAACoB,OAAO,CAACC,OAAO,CAACC,GAAG,CAACC,WAAW,CAAC,CACtCC,IAAI,CAAC,MAAMC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CAAC,CAC/CC,KAAK,CAACC,GAAG,IAAI;EACZH,OAAO,CAACI,KAAK,CAAC,8BAA8B,EAAED,GAAG,CAAC;EAClDP,OAAO,CAACS,IAAI,CAAC,CAAC,CAAC;AACjB,CAAC,CAAC;;AAEJ;AACAf,GAAG,CAACC,GAAG,CAAC,WAAW,EAAEX,UAAU,CAAC;AAChCU,GAAG,CAACC,GAAG,CAAC,iBAAiB,EAAEV,cAAc,CAAC;AAC1CS,GAAG,CAACC,GAAG,CAAC,YAAY,EAAET,UAAU,CAAC;;AAEjC;AACAQ,GAAG,CAACC,GAAG,CAAC,CAACY,GAAG,EAAEG,GAAG,EAAEC,GAAG,EAAEC,IAAI,KAAK;EAC/BR,OAAO,CAACI,KAAK,CAAC,QAAQ,EAAED,GAAG,CAAC;EAC5BI,GAAG,CAACE,MAAM,CAAC,GAAG,CAAC,CAACjB,IAAI,CAAC;IACnBkB,OAAO,EAAE,sBAAsB;IAC/BN,KAAK,EAAER,OAAO,CAACC,GAAG,CAACc,QAAQ,KAAK,YAAY,GAAG,CAAC,CAAC,GAAGR;EACtD,CAAC,CAAC;AACJ,CAAC,CAAC;AAEF,MAAMS,IAAI,GAAGhB,OAAO,CAACC,GAAG,CAACe,IAAI,IAAI,IAAI;AACrCtB,GAAG,CAACuB,MAAM,CAACD,IAAI,EAAE,MAAM;EACrBZ,OAAO,CAACC,GAAG,CAAC,0BAA0BW,IAAI,EAAE,CAAC;EAC7CZ,OAAO,CAACC,GAAG,CAAC,6BAA6BW,IAAI,MAAM,CAAC;AACtD,CAAC,CAAC;;AAEF;AACAhB,OAAO,CAACkB,EAAE,CAAC,oBAAoB,EAAE,CAACC,MAAM,EAAEC,OAAO,KAAK;EACpDhB,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAEe,OAAO,EAAE,SAAS,EAAED,MAAM,CAAC;AACpE,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}