{"ast":null,"code":"\"use client\";\n\nvar _jsxFileName = \"E:\\\\Virtual vow\\\\frontend\\\\src\\\\context\\\\AuthContext.js\",\n  _s = $RefreshSig$();\nimport { createContext, useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const AuthContext = /*#__PURE__*/createContext();\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [isAdmin, setIsAdmin] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkLoggedIn = async () => {\n      if (localStorage.getItem(\"token\")) {\n        try {\n          // In a real app, you would verify the token with your backend\n          const userData = JSON.parse(localStorage.getItem(\"userData\"));\n          console.log(\"Found user data in localStorage:\", userData);\n          setUser(userData);\n          setIsAuthenticated(true);\n          setIsAdmin(userData.role === \"admin\");\n          console.log(\"User authenticated, isAdmin:\", userData.role === \"admin\");\n        } catch (err) {\n          console.error(\"Error parsing user data:\", err);\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"userData\");\n          setError(\"Authentication failed. Please login again.\");\n        }\n      }\n      setLoading(false);\n    };\n    checkLoggedIn();\n  }, []);\n\n  // Register user\n  const register = async userData => {\n    setError(null);\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demo purposes, we'll simulate a successful registration\n      if (userData.email === \"existing@example.com\") {\n        setError(\"User already exists\");\n        return {\n          success: false\n        };\n      }\n\n      // Simulate API response\n      const response = {\n        data: {\n          token: \"sample-token-12345\",\n          user: {\n            id: Math.random().toString(36).substr(2, 9),\n            name: userData.name,\n            email: userData.email,\n            role: \"user\"\n          }\n        }\n      };\n\n      // Set token in localStorage\n      localStorage.setItem(\"token\", response.data.token);\n      localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\n\n      // Update state\n      setUser(response.data.user);\n      setIsAuthenticated(true);\n      setIsAdmin(false);\n      return {\n        success: true,\n        redirect: \"/dashboard\"\n      };\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || \"Registration failed. Please try again.\");\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Login user\n  const login = async (email, password) => {\n    setError(null);\n    try {\n      // In a real app, this would be an API call to your backend\n      // For demo purposes, we'll simulate authentication\n\n      // Simulate failed login\n      if (email !== \"user@example.com\" || password !== \"password\") {\n        setError(\"Invalid credentials\");\n        return {\n          success: false\n        };\n      }\n\n      // Simulate successful login\n      const response = {\n        data: {\n          token: \"sample-token-12345\",\n          user: {\n            id: \"123456\",\n            name: \"John Doe\",\n            email: \"user@example.com\",\n            role: \"user\"\n          }\n        }\n      };\n\n      // Set token in localStorage\n      localStorage.setItem(\"token\", response.data.token);\n      localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\n\n      // Update state\n      setUser(response.data.user);\n      setIsAuthenticated(true);\n      setIsAdmin(false);\n      return {\n        success: true,\n        redirect: \"/dashboard\"\n      };\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || \"Login failed. Please try again.\");\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Login admin\n  const loginAdmin = async (email, password) => {\n    setError(null);\n    try {\n      console.log(\"Attempting admin login for:\", email);\n\n      // In a real app, this would be an API call to your backend\n      // For demo purposes, we'll simulate authentication\n\n      // Simulate failed login\n      if (email !== \"admin@example.com\" || password !== \"adminpass\") {\n        console.log(\"Invalid admin credentials\");\n        setError(\"Invalid admin credentials\");\n        return {\n          success: false\n        };\n      }\n\n      // Simulate successful login\n      const response = {\n        data: {\n          token: \"admin-token-67890\",\n          user: {\n            id: \"admin123\",\n            name: \"Admin User\",\n            email: \"admin@example.com\",\n            role: \"admin\"\n          }\n        }\n      };\n      console.log(\"Admin login successful, setting user data:\", response.data.user);\n\n      // Set token in localStorage\n      localStorage.setItem(\"token\", response.data.token);\n      localStorage.setItem(\"userData\", JSON.stringify(response.data.user));\n\n      // Update state\n      setUser(response.data.user);\n      setIsAuthenticated(true);\n      setIsAdmin(true);\n      return {\n        success: true,\n        redirect: \"/admin/dashboard\"\n      };\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      console.error(\"Admin login error:\", err);\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || \"Admin login failed. Please try again.\");\n      return {\n        success: false\n      };\n    }\n  };\n\n  // Logout user\n  const logout = () => {\n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"userData\");\n    setUser(null);\n    setIsAuthenticated(false);\n    setIsAdmin(false);\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      isAuthenticated,\n      isAdmin,\n      loading,\n      error,\n      register,\n      login,\n      loginAdmin,\n      logout\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 179,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"i9wWUgiWZd93wHWThk7H8CXz76A=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["_jsxFileName","_s","$RefreshSig$","createContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","user","setUser","isAuthenticated","setIsAuthenticated","isAdmin","setIsAdmin","loading","setLoading","error","setError","checkLoggedIn","localStorage","getItem","userData","JSON","parse","console","log","role","err","removeItem","register","email","success","response","data","token","id","Math","random","toString","substr","name","setItem","stringify","redirect","_err$response","_err$response$data","message","login","password","_err$response2","_err$response2$data","loginAdmin","_err$response3","_err$response3$data","logout","Provider","value","fileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["E:/Virtual vow/frontend/src/context/AuthContext.js"],"sourcesContent":["\"use client\"\r\n\r\nimport { createContext, useState, useEffect } from \"react\"\r\n\r\nexport const AuthContext = createContext()\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null)\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false)\r\n  const [isAdmin, setIsAdmin] = useState(false)\r\n  const [loading, setLoading] = useState(true)\r\n  const [error, setError] = useState(null)\r\n\r\n  // Check if user is already logged in\r\n  useEffect(() => {\r\n    const checkLoggedIn = async () => {\r\n      if (localStorage.getItem(\"token\")) {\r\n        try {\r\n          // In a real app, you would verify the token with your backend\r\n          const userData = JSON.parse(localStorage.getItem(\"userData\"))\r\n          console.log(\"Found user data in localStorage:\", userData)\r\n          setUser(userData)\r\n          setIsAuthenticated(true)\r\n          setIsAdmin(userData.role === \"admin\")\r\n          console.log(\"User authenticated, isAdmin:\", userData.role === \"admin\")\r\n        } catch (err) {\r\n          console.error(\"Error parsing user data:\", err)\r\n          localStorage.removeItem(\"token\")\r\n          localStorage.removeItem(\"userData\")\r\n          setError(\"Authentication failed. Please login again.\")\r\n        }\r\n      }\r\n      setLoading(false)\r\n    }\r\n\r\n    checkLoggedIn()\r\n  }, [])\r\n\r\n  // Register user\r\n  const register = async (userData) => {\r\n    setError(null)\r\n    try {\r\n      // In a real app, this would be an API call to your backend\r\n      // For demo purposes, we'll simulate a successful registration\r\n      if (userData.email === \"existing@example.com\") {\r\n        setError(\"User already exists\")\r\n        return { success: false }\r\n      }\r\n\r\n      // Simulate API response\r\n      const response = {\r\n        data: {\r\n          token: \"sample-token-12345\",\r\n          user: {\r\n            id: Math.random().toString(36).substr(2, 9),\r\n            name: userData.name,\r\n            email: userData.email,\r\n            role: \"user\",\r\n          },\r\n        },\r\n      }\r\n\r\n      // Set token in localStorage\r\n      localStorage.setItem(\"token\", response.data.token)\r\n      localStorage.setItem(\"userData\", JSON.stringify(response.data.user))\r\n\r\n      // Update state\r\n      setUser(response.data.user)\r\n      setIsAuthenticated(true)\r\n      setIsAdmin(false)\r\n\r\n      return { success: true, redirect: \"/dashboard\" }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || \"Registration failed. Please try again.\")\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  // Login user\r\n  const login = async (email, password) => {\r\n    setError(null)\r\n    try {\r\n      // In a real app, this would be an API call to your backend\r\n      // For demo purposes, we'll simulate authentication\r\n\r\n      // Simulate failed login\r\n      if (email !== \"user@example.com\" || password !== \"password\") {\r\n        setError(\"Invalid credentials\")\r\n        return { success: false }\r\n      }\r\n\r\n      // Simulate successful login\r\n      const response = {\r\n        data: {\r\n          token: \"sample-token-12345\",\r\n          user: {\r\n            id: \"123456\",\r\n            name: \"John Doe\",\r\n            email: \"user@example.com\",\r\n            role: \"user\",\r\n          },\r\n        },\r\n      }\r\n\r\n      // Set token in localStorage\r\n      localStorage.setItem(\"token\", response.data.token)\r\n      localStorage.setItem(\"userData\", JSON.stringify(response.data.user))\r\n\r\n      // Update state\r\n      setUser(response.data.user)\r\n      setIsAuthenticated(true)\r\n      setIsAdmin(false)\r\n\r\n      return { success: true, redirect: \"/dashboard\" }\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || \"Login failed. Please try again.\")\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  // Login admin\r\n  const loginAdmin = async (email, password) => {\r\n    setError(null)\r\n    try {\r\n      console.log(\"Attempting admin login for:\", email)\r\n\r\n      // In a real app, this would be an API call to your backend\r\n      // For demo purposes, we'll simulate authentication\r\n\r\n      // Simulate failed login\r\n      if (email !== \"admin@example.com\" || password !== \"adminpass\") {\r\n        console.log(\"Invalid admin credentials\")\r\n        setError(\"Invalid admin credentials\")\r\n        return { success: false }\r\n      }\r\n\r\n      // Simulate successful login\r\n      const response = {\r\n        data: {\r\n          token: \"admin-token-67890\",\r\n          user: {\r\n            id: \"admin123\",\r\n            name: \"Admin User\",\r\n            email: \"admin@example.com\",\r\n            role: \"admin\",\r\n          },\r\n        },\r\n      }\r\n\r\n      console.log(\"Admin login successful, setting user data:\", response.data.user)\r\n\r\n      // Set token in localStorage\r\n      localStorage.setItem(\"token\", response.data.token)\r\n      localStorage.setItem(\"userData\", JSON.stringify(response.data.user))\r\n\r\n      // Update state\r\n      setUser(response.data.user)\r\n      setIsAuthenticated(true)\r\n      setIsAdmin(true)\r\n\r\n      return { success: true, redirect: \"/admin/dashboard\" }\r\n    } catch (err) {\r\n      console.error(\"Admin login error:\", err)\r\n      setError(err.response?.data?.message || \"Admin login failed. Please try again.\")\r\n      return { success: false }\r\n    }\r\n  }\r\n\r\n  // Logout user\r\n  const logout = () => {\r\n    localStorage.removeItem(\"token\")\r\n    localStorage.removeItem(\"userData\")\r\n    setUser(null)\r\n    setIsAuthenticated(false)\r\n    setIsAdmin(false)\r\n  }\r\n\r\n  return (\r\n    <AuthContext.Provider\r\n      value={{\r\n        user,\r\n        isAuthenticated,\r\n        isAdmin,\r\n        loading,\r\n        error,\r\n        register,\r\n        login,\r\n        loginAdmin,\r\n        logout,\r\n      }}\r\n    >\r\n      {children}\r\n    </AuthContext.Provider>\r\n  )\r\n}\r\n\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}